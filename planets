//============================================================================
// PROJECT ID:
//
// GROUP NUMBER:
//
// STUDENT NAME:
// NUS User ID.:
//
// STUDENT NAME:
// NUS User ID.:
//
// STUDENT NAME:
// NUS User ID.:
//
// COMMENTS TO GRADER:
//
//============================================================================


// FRAGMENT SHADER FOR SHADERTOY
// Run this at https://www.shadertoy.com/new
// See documentation at https://www.shadertoy.com/howto

// Your browser must support WebGL 2.0.
// Check your browser at https://webglreport.com/?v=2


//============================================================================
// Constants.
//============================================================================

const float PI = 3.1415926536;

const vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );

// Vertical field-of-view angle of camera. In radians.
const float FOVY = 50.0 * PI / 180.0;

// Use this for avoiding the "epsilon problem" or the shadow acne problem.
const float DEFAULT_TMIN = 10.0e-4;

// Use this for tmax for non-shadow ray intersection test.
const float DEFAULT_TMAX = 10.0e6;

// Equivalent to number of recursion levels (0 means ray-casting only).
// We are using iterations to replace recursions.
const int NUM_ITERATIONS = 2;

// Constants for the scene objects.
const int NUM_LIGHTS = 10;
const int NUM_MATERIALS = 20;
const int NUM_PLANES = 6;
const int NUM_SPHERES = 50;
const int NUM_METEORITE = 3;
const int NUM_ASTEROIDS = 30;


//============================================================================
// Define new struct types.
//============================================================================
struct Ray_t {
    vec3 o;  // Ray Origin.
    vec3 d;  // Ray Direction. A unit vector.
};

struct Plane_t {
    // The plane equation is Ax + By + Cz + D = 0.
    float A, B, C, D;
    int materialID;
};

struct Sphere_t {
    vec3 center;
    float radius;
    int materialID;
};

struct Light_t {
    vec3 position;  // Point light 3D position.
    vec3 I_a;       // For Ambient.
    vec3 I_source;  // For Diffuse and Specular.
};

struct Material_t {
    vec3 k_a;   // Ambient coefficient.
    vec3 k_d;   // Diffuse coefficient.
    vec3 k_r;   // Reflected specular coefficient.
    vec3 k_rg;  // Global reflection coefficient.
    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.
};

//----------------------------------------------------------------------------
// The lighting model used here is similar to that shown in
// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as
//
//     I_local = SUM_OVER_ALL_LIGHTS {
//                   I_a * k_a +
//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]
//               }
// and
//     I = I_local  +  k_rg * I_reflected
//----------------------------------------------------------------------------


//============================================================================
// Global scene data.
//============================================================================
Plane_t Plane[NUM_PLANES];
Sphere_t Sphere[NUM_SPHERES];
Light_t Light[NUM_LIGHTS];
Material_t Material[NUM_MATERIALS];


// random function returns float numbers in (0,1)
float co1 = 0.6522891;
float co2 = 0.4654321;
float rand() {
    vec2 co = vec2(co1, co2);
    co1 = fract(sin(co1)*486521.2);
    co2 = fract(sin(co2)*103985.8);
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}


/////////////////////////////////////////////////////////////////////////////
// Initializes the scene.
/////////////////////////////////////////////////////////////////////////////
vec3 rotateY(vec3 p, float angle) {
    float s = sin(angle);
    float c = cos(angle);
    return vec3(
        c * p.x + s * p.z,
        p.y,
        -s * p.x + c * p.z
    );
}

void InitScene()
{
    // Horizontal plane.
    Plane[0].A = 0.0;
    Plane[0].B = 1.0;
    Plane[0].C = 0.0;
    Plane[0].D = 0.0;
    Plane[0].materialID = 0;

    // Vertical plane.
    Plane[1].A = 0.0;
    Plane[1].B = 0.0;
    Plane[1].C = 1.0;
    Plane[1].D = 20.0;
    Plane[1].materialID = 0;

    // New vertical silver plane perpendicular to the other two planes.
    Plane[2].A = 1.0; // Normal vector in the x-direction
    Plane[2].B = 0.0;
    Plane[2].C = 0.0;
    Plane[2].D = 20.0;
    Plane[2].materialID = 0; // Silver material
    
    // New vertical silver plane
    Plane[3].A = 1.0;
    Plane[3].B = 0.0;
    Plane[3].C = 0.0;
    Plane[3].D =-20.0;
    Plane[3].materialID = 0; // Silver material
    
    // New vertical silver plane perpendicular to the other two planes.
    Plane[4].A = 0.0; // Normal vector in the x-direction
    Plane[4].B = 0.0;
    Plane[4].C = 0.0;
    Plane[4].D = -20.0;
    Plane[4].materialID = 0; // Silver material

    // 土星环
    Plane[5].A = 0.0;
    Plane[5].B = 1.0;
    Plane[5].C = 0.0;
    Plane[5].D = 10.5;
    Plane[5].materialID = 11;
    

    // sun
    Sphere[0].center = vec3(0.0, 10.0, 0.0 );
    Sphere[0].radius = 2.0;
    Sphere[0].materialID = 1;
    
    // Mercury
    Sphere[1].center = vec3(3.0 * cos(iTime * 4.0), 10.0, 3.0 * sin(iTime * 4.0));
    Sphere[1].radius = 0.1;
    Sphere[1].materialID = 2;
    
    // Venus
    Sphere[2].center = vec3(4.0 * cos(iTime * 1.67), 10.1, 4.0 * sin(iTime * 1.67));
    Sphere[2].radius = 0.18;
    Sphere[2].materialID = 3;
    
    // earth
    Sphere[3].center = vec3(5.0 * cos(iTime * 1.0), 9.9, 5.0 * sin(iTime * 1.0));
    Sphere[3].radius = 0.2;
    Sphere[3].materialID = 4;
    
    // Mars
    Sphere[4].center = vec3(5.2 * cos(iTime * 0.53), 10.0, 5.2 * sin(iTime * 0.53));
    Sphere[4].radius = 0.3;
    Sphere[4].materialID = 5;
    
    // Jupiter
    Sphere[5].center = vec3(6.5 * cos(iTime * 0.09), 10.2, 6.5 * sin(iTime * 0.09));
    Sphere[5].radius = 0.6;
    Sphere[5].materialID = 6;
    
    // Saturn
    Sphere[6].center = vec3(9.0 * cos(iTime * 0.04), 10.3, 9.0 * sin(iTime * 0.04));
    Sphere[6].radius = 0.5;
    Sphere[6].materialID = 7;

    // Uranus
    Sphere[7].center = vec3(13.0 * cos(iTime * 0.012), 10.1, 13.0 * sin(iTime * 0.012));
    Sphere[7].radius = 0.34;
    Sphere[7].materialID = 8;
    
    // Neptune
    Sphere[8].center = vec3(17.0 * cos(iTime * 0.006), 10.0, 17.0 * sin(iTime * 0.006));
    Sphere[8].radius = 0.2;
    Sphere[8].materialID = 9;

    // moon
    // rotating with the earth
    Sphere[9].center = vec3(5.0 * cos(iTime * 1.0) + 0.4 * cos(iTime * 10.0), 9.9, 5.0 * sin(iTime * 1.0) + 0.4 * sin(iTime * 10.0));
    Sphere[9].radius = 0.05;
    Sphere[9].materialID = 10;

    // Meteorite
    for (int i = 0; i < NUM_METEORITE; i++) {
        float circle = rand() * 14.0 + 3.0; // (3.0,17.0)
        float delx = rand() + 9.5; // (9.5,10.5)
        float velocity = rand() * 4.0; // (0,4)
        float rad = rand() * 0.02 + 0.02; // (0.02, 0.04)
        Sphere[i+10].center = vec3(circle * cos(iTime * velocity), delx, circle * sin(iTime * velocity));
        Sphere[i+10].radius = rad;
        Sphere[i+10].materialID = 12;
    }

    // Asteroids
    for (int i = 0; i < NUM_ASTEROIDS; i++) {
        float circle = rand() * 0.7 + 5.5; // (5.5,6.2)
        float delx = rand() + 9.5; // (9.5,10.5)
        float velocity = rand() * 0.4 + 0.1; // (0.1,0.5)
        float rad = rand() * 0.02 + 0.02; // (0.02, 0.04)
        Sphere[i+10+NUM_METEORITE].center = vec3(circle * cos(iTime * velocity), delx, circle * sin(iTime * velocity));
        Sphere[i+10+NUM_METEORITE].radius = rad;
        Sphere[i+10+NUM_METEORITE].materialID = 13;
    }


    // Silver material.
    Material[0].k_d = vec3(0.3, 0.3, 0.3);
    Material[0].k_a = 0.2 * Material[0].k_d;
    Material[0].k_r = 2.0 * Material[0].k_d;
    Material[0].k_rg = 0.5 * Material[0].k_r;
    Material[0].n = 64.0;

    // sun material.
    Material[1].k_d = vec3(241.0 / 255.0, 118.0 / 255.0, 12.0 / 255.0);
    Material[1].k_a = 0.2 * Material[1].k_d;
    Material[1].k_r = 2.0 * Material[1].k_d;
    Material[1].k_rg = 0.5 * Material[1].k_r;
    Material[1].n = 64.0;

     // Mercury material.
    Material[2].k_d = vec3(188.0 / 255.0, 188.0 / 255.0, 169.0 / 255.0);
    Material[2].k_a = 0.2 * Material[2].k_d;
    Material[2].k_r = vec3(0.1, 0.1, 0.1);
    Material[2].k_rg = vec3(0.05, 0.05, 0.05);
    Material[2].n = 128.0;


    // Venus material.
    Material[3].k_d = vec3(237.0 / 255.0, 201.0 / 255.0, 175.0 / 255.0);
    Material[3].k_a = 0.2 * Material[3].k_d;
    Material[3].k_r = vec3(0.2, 0.2, 0.2);
    Material[3].k_rg = vec3(0.1, 0.1, 0.1);
    Material[3].n = 64.0;
    
    // earth material.
    Material[4].k_d = vec3(50.0 / 255.0, 100.0 / 255.0, 230.0 / 255.0);
    Material[4].k_a = 0.2 * Material[4].k_d;
    Material[4].k_r = vec3(0.3, 0.3, 0.3);
    Material[4].k_rg = vec3(0.15, 0.15, 0.15);
    Material[4].n = 128.0;
    
    // Mars material.
    Material[5].k_d = vec3(210.0 / 255.0, 105.0 / 255.0, 30.0 / 255.0);
    Material[5].k_a = 0.2 * Material[5].k_d;
    Material[5].k_r = vec3(0.2, 0.1, 0.1);
    Material[5].k_rg = vec3(0.1, 0.05, 0.05);
    Material[5].n = 64.0;

    // Jupiter material.
    Material[6].k_d = vec3(209.0 / 255.0, 139.0 / 255.0, 71.0 / 255.0);
    Material[6].k_a = 0.2 * Material[5].k_d;
    Material[6].k_r = vec3(0.2, 0.15, 0.1);
    Material[6].k_rg = vec3(0.1, 0.08, 0.05);
    Material[6].n = 64.0;

    // Saturn material.
    Material[7].k_d = vec3(210.0 / 255.0, 180.0 / 255.0, 140.0 / 255.0);
    Material[7].k_a = 0.2 * Material[7].k_d;
    Material[7].k_r = vec3(0.3, 0.25, 0.2);
    Material[7].k_rg = vec3(0.15, 0.1, 0.1);
    Material[7].n = 64.0;

    // Uranus material.
    Material[8].k_d = vec3(173.0 / 255.0, 216.0 / 255.0, 230.0 / 255.0);
    Material[8].k_a = 0.2 * Material[6].k_d;
    Material[8].k_r = vec3(0.1, 0.2, 0.3);
    Material[8].k_rg = vec3(0.05, 0.1, 0.15);
    Material[8].n = 64.0;

    // Neptune material.
    Material[9].k_d = vec3(70.0 / 255.0, 130.0 / 255.0, 180.0 / 255.0);
    Material[9].k_a = 0.2 * Material[8].k_d;
    Material[9].k_r = vec3(0.1, 0.1, 0.2);
    Material[9].k_rg = vec3(0.05, 0.05, 0.1);
    Material[9].n = 64.0;

    // Moon material.
    Material[10].k_d = vec3(252.0 / 255.0, 254.0 / 255.0, 218.0 / 255.0);
    Material[10].k_a = 0.2 * Material[10].k_d;
    Material[10].k_r = vec3(0.3, 0.3, 0.3);
    Material[10].k_rg = vec3(0.15, 0.15, 0.15);
    Material[10].n = 128.0;

    // 定义土星环的材质属性
    Material[11].k_d = vec3(60.0 / 255.0, 31.0 / 255.0, 118.0 / 255.0); // 土星环的漫反射颜色
    Material[11].k_a = 0.2 * Material[11].k_d; // 土星环的环境光反射颜色
    Material[11].k_r = vec3(0.8, 0.8, 0.8); // 土星环的镜面反射颜色
    Material[11].k_rg = vec3(0.4, 0.4, 0.4); // 土星环的镜面环境反射颜色
    Material[11].n = 128.0; // 土星环的反射指数，控制镜面高光大小

    // Meteorite material.
    Material[12].k_d = vec3(130.0 / 255.0, 106.0 / 255.0, 89.0 / 255.0);  // 陨石的漫反射颜色（灰色）
    Material[12].k_a = 0.2 * Material[12].k_d;  // 环境光反射颜色
    Material[12].k_r = vec3(0.3, 0.3, 0.3);  // 陨石的镜面反射颜色（灰色）
    Material[12].k_rg = vec3(0.1, 0.1, 0.1);  // 陨石的镜面环境反射颜色（灰色）
    Material[12].n = 64.0;  // 反射指数，控制镜面高光大小

    // Asteroids material.
    Material[13].k_d = vec3(209.0 / 255.0, 121.0 / 255.0, 58.0 / 255.0);
    Material[13].k_a = 0.2 * Material[10].k_d;
    Material[13].k_r = vec3(0.3, 0.3, 0.3);
    Material[13].k_rg = vec3(0.15, 0.15, 0.15);
    Material[13].n = 128.0;


    // Light 0.
    Light[0].position = vec3( 0.0, 20.0, 0.0 );
    Light[0].I_a = vec3( 1.0, 0.8, 0.6 );
    Light[0].I_source = vec3( 0.5, 0.4, 0.35 );

    // sun
    Light[2].position = vec3(0.0, 10.0, 0.0);
    Light[2].I_a = vec3(2.0, 1.6, 1.2);  // 增强环境光
    Light[2].I_source = vec3(5.0, 4.0, 3.5);  // 增强光源强度

}



/////////////////////////////////////////////////////////////////////////////
// Computes intersection between a plane and a ray.
// Returns true if there is an intersection where the ray parameter t is
// between tmin and tmax, otherwise returns false.
// If there is such an intersection, outputs the value of t, the position
// of the intersection (hitPos) and the normal vector at the intersection
// (hitNormal).
/////////////////////////////////////////////////////////////////////////////
bool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,
                     out float t, out vec3 hitPos, out vec3 hitNormal )
{
    vec3 N = vec3( pln.A, pln.B, pln.C );
    float NRd = dot( N, ray.d );
    float NRo = dot( N, ray.o );
    float t0 = (-pln.D - NRo) / NRd;
    if ( t0 < tmin || t0 > tmax ) return false;

    // We have a hit -- output results.
    t = t0;
    hitPos = ray.o + t0 * ray.d;
    hitNormal = normalize( N );
    return true;
}



/////////////////////////////////////////////////////////////////////////////
// Computes intersection between a plane and a ray.
// Returns true if there is an intersection where the ray parameter t is
// between tmin and tmax, otherwise returns false.
/////////////////////////////////////////////////////////////////////////////
bool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )
{
    vec3 N = vec3( pln.A, pln.B, pln.C );
    float NRd = dot( N, ray.d );
    float NRo = dot( N, ray.o );
    float t0 = (-pln.D - NRo) / NRd;
    if ( t0 < tmin || t0 > tmax ) return false;
    return true;
}



/////////////////////////////////////////////////////////////////////////////
// Computes intersection between a sphere and a ray.
// Returns true if there is an intersection where the ray parameter t is
// between tmin and tmax, otherwise returns false.
// If there is one or two such intersections, outputs the value of the
// smaller t, the position of the intersection (hitPos) and the normal
// vector at the intersection (hitNormal).
/////////////////////////////////////////////////////////////////////////////
bool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,
                      out float t, out vec3 hitPos, out vec3 hitNormal )
{
    /////////////////////////////////
    // TASK: WRITE YOUR CODE HERE. //
    /////////////////////////////////

    vec3 oc = ray.o - sph.center;
    float a = dot(ray.d, ray.d);
    float b = 2.0 * dot(oc, ray.d);
    float c = dot(oc, oc) - sph.radius * sph.radius;
    float discriminant = b * b - 4.0 * a * c;
    if (discriminant < 0.0) return false;

    float sqrtDiscriminant = sqrt(discriminant);
    float t0 = (-b - sqrtDiscriminant) / (2.0 * a);
    float t1 = (-b + sqrtDiscriminant) / (2.0 * a);

    if (t0 > tmin && t0 < tmax) {
        t = t0;
        hitPos = ray.o + t0 * ray.d;
        hitNormal = normalize(hitPos - sph.center);
        
        // Rotate the normal around the y-axis
        hitNormal = rotateY(hitNormal, 0.1 * iTime);
        
        return true;
    } else if (t1 > tmin && t1 < tmax) {
        t = t1;
        hitPos = ray.o + t1 * ray.d;
        hitNormal = normalize(hitPos - sph.center);
        
        // Rotate the normal around the y-axis
        hitNormal = rotateY(hitNormal, 0.1 * iTime);
        
        return true;
    }
    return false;
}



/////////////////////////////////////////////////////////////////////////////
// Computes intersection between a sphere and a ray.
// Returns true if there is an intersection where the ray parameter t is
// between tmin and tmax, otherwise returns false.
/////////////////////////////////////////////////////////////////////////////
bool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )
{
    /////////////////////////////////
    // TASK: WRITE YOUR CODE HERE. //
    /////////////////////////////////

    vec3 oc = ray.o - sph.center;
    float a = dot(ray.d, ray.d);
    float b = 2.0 * dot(oc, ray.d);
    float c = dot(oc, oc) - sph.radius * sph.radius;
    float discriminant = b * b - 4.0 * a * c;
    if (discriminant < 0.0) return false;

    float sqrtDiscriminant = sqrt(discriminant);
    float t0 = (-b - sqrtDiscriminant) / (2.0 * a);
    float t1 = (-b + sqrtDiscriminant) / (2.0 * a);

    if (t0 > tmin && t0 < tmax) {
        return true;
    } else if (t1 > tmin && t1 < tmax) {
        return true;
    }
    return false;
}



/////////////////////////////////////////////////////////////////////////////
// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].
// Input vectors L, N and V are pointing AWAY from surface point.
// Assume all vectors L, N and V are unit vectors.
/////////////////////////////////////////////////////////////////////////////
vec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,
                    in Material_t mat, in Light_t light )
{
    if ( inShadow ) {
        return light.I_a * mat.k_a;
    }
    else {
        vec3 R = reflect( -L, N );
        float N_dot_L = max( 0.0, dot( N, L ) );
        float R_dot_V = max( 0.0, dot( R, V ) );
        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );

        return light.I_a * mat.k_a +
               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);
    }
}



/////////////////////////////////////////////////////////////////////////////
// Casts a ray into the scene and returns color computed at the nearest
// intersection point. The color is the sum of light from all light sources,
// each computed using Phong Lighting Model, with consideration of
// whether the interesection point is being shadowed from the light.
// If there is no interesection, returns the background color, and outputs
// hasHit as false.
// If there is intersection, returns the computed color, and outputs
// hasHit as true, the 3D position of the intersection (hitPos), the
// normal vector at the intersection (hitNormal), and the k_rg value
// of the material of the intersected object.
/////////////////////////////////////////////////////////////////////////////
vec3 CastRay( in Ray_t ray,
              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )
{
    // Find whether and where the ray hits some object.
    // Take the nearest hit point.

    bool hasHitSomething = false;
    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.
    vec3 nearest_hitPos;              // 3D position of the nearest hit point.
    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.
    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.

    float temp_t;
    vec3 temp_hitPos;
    vec3 temp_hitNormal;
    bool temp_hasHit;

    /////////////////////////////////////////////////////////////////////////////
    // TASK:
    // * Try interesecting input ray with all the planes and spheres,
    //   and record the front-most (nearest) interesection.
    // * If there is interesection, need to record hasHitSomething,
    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.
    /////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////
    // TASK: WRITE YOUR CODE HERE. //
    /////////////////////////////////

    // Try intersecting input ray with all the planes and spheres,
    // and record the front-most (nearest) intersection.
    for (int i = 0; i < NUM_PLANES; i++) {
        if (IntersectPlane(Plane[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal)) {
            hasHitSomething = true;
            nearest_t = temp_t;
            nearest_hitPos = temp_hitPos;
            nearest_hitNormal = temp_hitNormal;
            nearest_hitMatID = Plane[i].materialID;
        }
    }
    for (int i = 0; i < NUM_SPHERES; i++) {
        if (IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal)) {
            hasHitSomething = true;
            nearest_t = temp_t;
            nearest_hitPos = temp_hitPos;
            nearest_hitNormal = temp_hitNormal;
            nearest_hitMatID = Sphere[i].materialID;
        }
    }


    // One of the output results.
    hasHit = hasHitSomething;
    if ( !hasHitSomething ) return BACKGROUND_COLOR;

    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.

    /////////////////////////////////////////////////////////////////////////////
    // TASK:
    // * Accumulate lighting from each light source on the nearest hit point.
    //   They are all accumulated into I_local.
    // * For each light source, make a shadow ray, and check if the shadow ray
    //   intersects any of the objects (the planes and spheres) between the
    //   nearest hit point and the light source.
    // * Then, call PhongLighting() to compute lighting for this light source.
    /////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////
    // TASK: WRITE YOUR CODE HERE. //
    /////////////////////////////////

    // Accumulate lighting from each light source on the nearest hit point.
    for (int i = 0; i < NUM_LIGHTS; i++) {
        vec3 lightDir = normalize(Light[i].position - nearest_hitPos);
        vec3 shadowRayDir = lightDir;
        Ray_t shadowRay = Ray_t(nearest_hitPos + DEFAULT_TMIN * shadowRayDir, shadowRayDir);

        bool inShadow = false;
        for (int j = 0; j < NUM_PLANES; j++) {
            if (IntersectPlane(Plane[j], shadowRay, DEFAULT_TMIN, length(Light[i].position - nearest_hitPos))) {
                inShadow = true;
                break;
            }
        }

        if (!inShadow) {
            for (int j = 0; j < NUM_SPHERES; j++) {
                if (IntersectSphere(Sphere[j], shadowRay, DEFAULT_TMIN, length(Light[i].position - nearest_hitPos))) {
                    inShadow = true;
                    break;
                }
            }
        }

        vec3 viewDir = normalize(-ray.d);
        I_local += PhongLighting(lightDir, nearest_hitNormal, viewDir, inShadow, Material[nearest_hitMatID], Light[i]);
    }



    // Populate output results.
    hitPos = nearest_hitPos;
    hitNormal = nearest_hitNormal;
    k_rg = Material[nearest_hitMatID].k_rg;
    
    // Apply texture if the hit object is sun
    if (nearest_hitMatID == 1) {  // assuming Sphere[0] has materialID 1
        vec2 uv = (nearest_hitPos.xy + vec2(1.0)) * 0.5;  // simple UV mapping, adjust as needed
        vec3 textureColor = texture(iChannel0, uv).rgb;
        I_local *= textureColor;
    }
    
    // Apply texture if the hit object is one of the planes
    if (nearest_hitMatID == 0) {
        vec2 uv;
        if (abs(nearest_hitNormal.y) > 0.5) { // Horizontal plane
            uv = (nearest_hitPos.xz + vec2(20.0)) / 40.0;
        } else if (abs(nearest_hitNormal.z) > 0.5) { // Vertical planes facing z
            uv = (nearest_hitPos.xy + vec2(20.0)) / 40.0;
        } else { // Vertical planes facing x
            uv = (nearest_hitPos.zy + vec2(20.0)) / 40.0;
        }
        vec3 textureColor = texture(iChannel1, uv).rgb;
        I_local *= textureColor;
    }
    
    return I_local;
}



/////////////////////////////////////////////////////////////////////////////
// Execution of fragment shader starts here.
// 1. Initializes the scene.
// 2. Compute a primary ray for the current pixel (fragment).
// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.
/////////////////////////////////////////////////////////////////////////////
void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    InitScene();

    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].
    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;
    
    float angle = iTime; // 改变角度计算方式
    vec3 cam_pos = vec3(5.0 + 13.0 * cos(iTime), 10.0 + 2.0 * sin(iTime), 3.0 + 15.0 * sin(angle)); 

    vec3 cam_lookat = vec3(0.0, 10.0, 0.0);
    vec3 cam_up_vec = vec3(0.0, 1.0, 0.0);

    // Set up camera coordinate frame in world space.
    vec3 cam_z_axis = normalize(cam_pos - cam_lookat);
    vec3 cam_x_axis = normalize(cross(cam_up_vec, cam_z_axis));
    vec3 cam_y_axis = cross(cam_z_axis, cam_x_axis);

    // Create primary ray.
    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);
    Ray_t pRay;
    pRay.o = cam_pos;
    pRay.d = normalize(pixel_pos.x * cam_x_axis + pixel_pos.y * cam_y_axis + pixel_pos_z * cam_z_axis);

    // Start Ray Tracing.
    // Use iterations to emulate the recursion.

    vec3 I_result = vec3(0.0);
    vec3 compounded_k_rg = vec3(1.0);
    Ray_t nextRay = pRay;

    for (int level = 0; level <= NUM_ITERATIONS; level++) {
        bool hasHit;
        vec3 hitPos, hitNormal, k_rg;

        vec3 I_local = CastRay(nextRay, hasHit, hitPos, hitNormal, k_rg);

        I_result += compounded_k_rg * I_local;

        if (!hasHit) break;

        compounded_k_rg *= k_rg;

        nextRay = Ray_t(hitPos, normalize(reflect(nextRay.d, hitNormal)));
    }

    fragColor = vec4(I_result, 1.0);
}
